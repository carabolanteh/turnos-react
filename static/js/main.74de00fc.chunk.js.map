{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["uuidv4","Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","mensajeEnviado","setMensajeEnviado","handlerState","e","console","log","target","name","value","className","onSubmit","preventDefault","trim","id","type","placeholder","onChange","Cita","eliminarCita","onClick","App","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74de00fc.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport {useState} from \"react\";\r\n// import uuid from \"uuid/v4\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\nuuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\r\n\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    // CREAR EL ESTADO DE LAS CITAS\r\n    // se llama a un obj con todas las propiedades del formulario\r\n\r\n    const [cita, setCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    })\r\n\r\n     // CREANDO EL ESTADO DEL ERROR\r\n\r\n     const [error, setError] = useState(false)\r\n\r\n    // PARA DAR MSJ AL USUARIO DE QUE SUS DATOS FUERON GUARDADOS EXITOSAMENTE\r\n\r\n        const [mensajeEnviado, setMensajeEnviado] = useState()\r\n\r\n\r\n\r\n    const handlerState = e => {\r\n        // identificar el input\r\n        console.log(e.target.name);\r\n        // identidicar el valor\r\n        console.log(e.target.value);\r\n        // poner en el estado el valor del input con su respectivo input\r\n        setCita({\r\n            //para que no lo sobre escriba copiamos el anterior y logramos la concatenación\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n\r\n    }\r\n    \r\n\r\n    // EXTRAER VALORES DE LAS CITAS\r\n\r\n    // Destructuring\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n\r\n    // CUANDO EL USUARIO PRESIONES \"AGREGAR CITA\"\r\n\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n    //VALIDAR\r\n        //trim(no recibe espacios vacíos)\r\n        if(\r\n            mascota.trim() === '' ||\r\n            propietario.trim() === '' ||\r\n            fecha.trim() === '' ||\r\n            hora.trim() === '' ||\r\n            sintomas.trim() === ''\r\n        ){\r\n            setError(true)\r\n            return;\r\n        }\r\n        setError(false)\r\n        console.log('Formulario enviado');\r\n\r\n   \r\n    // AGREGAR UN ID\r\n        cita.id = uuidv4()\r\n        console.log(cita);\r\n\r\n    // CREAR UNA CITA\r\n        crearCita(cita);\r\n        \r\n    // MOSTRAR MSJA DE EXITO\r\n\r\n    setMensajeEnviado(true)\r\n\r\n    // OCULTANDO MJS\r\n\r\n    // LIMPIAR EL FORMULARIO\r\n        setCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        })\r\n    }\r\n\r\n\r\n    return(\r\n      <>\r\n        <h2>Crear cita</h2>\r\n\r\n        {/* {error ? <p className='alerta-error'>Todos los campos son obligatorios</p> : null} */}\r\n        {error && <p className='alerta-error'>Todos los campos son obligatorios</p>}\r\n        {mensajeEnviado && <p className='alerta-enviado'>Sus datos fueron guardados con exito</p>}\r\n\r\n        <form\r\n            onSubmit={submitCita}\r\n        >\r\n            <label>Nombre de mascota</label>\r\n            <input \r\n                type=\"text\" \r\n                name=\"mascota\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre de mascota\"\r\n                // value={cita.mascota} es igual a:\r\n                value={mascota}\r\n                onChange={handlerState}\r\n            />\r\n            <label>Nombre del dueño</label>\r\n            <input \r\n                type=\"text\" \r\n                name=\"propietario\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre del dueño de la mascota\"\r\n                value={propietario}\r\n                onChange={handlerState}\r\n            />\r\n            <label>Fecha de ingreso</label>\r\n            <input \r\n                type=\"date\" \r\n                name=\"fecha\"\r\n                className=\"u-full-width\"\r\n                value={fecha}\r\n                onChange={handlerState}\r\n            />\r\n            <label>Hora de ingreso</label>\r\n            <input \r\n                type=\"time\" \r\n                name=\"hora\"\r\n                className=\"u-full-width\"\r\n                value={hora}\r\n                onChange={handlerState}\r\n            />\r\n            <label>Síntomas</label>\r\n            <textarea \r\n                name=\"sintomas\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"¿Cuáles son los síntomas?\"\r\n                value={sintomas}\r\n                onChange={handlerState}\r\n            />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"u-full-width button-primary\"\r\n            >\r\n                Agregar Cita\r\n            </button>\r\n        </form>\r\n      </>\r\n    );\r\n  };\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired,\r\n}\r\n  \r\nexport default Formulario;\r\n  ","import PropTypes from 'prop-types';\r\n\r\nconst Cita = ({\r\n    cita:{mascota, propietario, fecha, hora, sintomas, id},\r\n    eliminarCita\r\n    }) => {\r\n    return(\r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{mascota}</span></p>\r\n            <p>Propietario: <span>{propietario}</span></p>\r\n            <p>Fecha: <span>{fecha}</span></p>\r\n            <p>Hora: <span>{hora}</span></p>\r\n            <p>Síntomas: <span>{sintomas}</span></p>\r\n            <button \r\n                className=\"button eliminar u-full-width\"\r\n                onClick={()=> eliminarCita(id)}\r\n            >Eliminar &times;</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import { useState, useEffect } from 'react';\nimport Formulario from './components/Formulario'; \nimport Cita from './components/Cita';\n\nfunction App() {\n\n   // Citas en localStorage\n\n  //  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  //  if(!citasIniciales){\n  //    citasIniciales = []\n  //  }\n\n  // ESTADO DE TODAS LAS CITAS\n\n  const [citas, setCitas] = useState(JSON.parse(localStorage.getItem('citas')) || []);\n\n  useEffect(() => {\n      localStorage.setItem('citas', JSON.stringify(citas))\n  }, [citas]);\n\n  // FUNCION QUE TOME TODAS LAS CITAS ACT Y AGREGUE UNA NUEVA\n\n  const crearCita = cita => {\n    setCitas([\n      ...citas,\n      cita\n    ]);\n  }\n\n\n\n  // FUNCION ENCARGADA DE ELIMINAR LAS CITAS\n\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    setCitas(nuevasCitas)\n  }\n\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas'\n\n\n  return (\n    <div>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita \n                cita={cita}\n                eliminarCita={eliminarCita}\n                key={cita.id}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}